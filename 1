#include <Wire.h>
#include <OneWire.h>
#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
byte _d18x2x2Addr[8]={0x28, 0x7, 0xF, 0xAA, 0x5C, 0x21, 0x1, 0xDD};
OneWire  _ow12(12);
bool _FreeLog1_IArr[2];
bool _FreeLog1_Q1_StArr[] = {1, 1};
const int _menuParametrsArray[]  PROGMEM =  {1, 4, 2, 0, 0, 0, 0, 1, 1, 4, 3, 0, 2, 4, 3, 0, 0, 0, 0, 1, 1, 4, 4, 0, 3, 1, 1, 0, 0, 0, 0, 2, 1, 4, 2, 0, 4, 4, 1, 0, 0, 0, 0, 2, 1, 4, 1, 0, 5, 4, 5, 0, 0, 0, 0, 2, 1, 4, 7, 0, 6, 4, 4, 0, 0, 0, 0, 3, 1, 4, 6, 0, 7, 3, 1, 0, 0, 0, 8, 9, 1, 8, 5, 0};
unsigned long _menuValueArray_unsignedlong[1];
const unsigned long _menuConstantValuesArray_unsignedlong[]  PROGMEM =  {10000, 0};
bool _menuValueArray_bool[1];
const bool _menuConstantValuesArray_bool[]  PROGMEM =  {1, 0};
int _menuValueArray_int[5];
const int _menuConstantValuesArray_int[]  PROGMEM =  {1, 0, 50};
const char _flprogMenuNameString1[] PROGMEM = "Fun on";
const char _flprogMenuNameString2[] PROGMEM = "Cycles";
const char _flprogMenuNameString3[] PROGMEM = "Impulse ";
const char _flprogMenuNameString4[] PROGMEM = "Pause";
const char _flprogMenuNameString5[] PROGMEM = "START";
const char _flprogMenuNameString6[] PROGMEM = "Em stop";
const char _flprogMenuNameString7[] PROGMEM = "Fun off ";
const char _flprogMenuNameString8[] PROGMEM = "ON";
const char _flprogMenuNameString9[] PROGMEM = "OFF";
const char* const _flprogMenuStringsArray[] PROGMEM = { _flprogMenuNameString1,  _flprogMenuNameString2,  _flprogMenuNameString3,  _flprogMenuNameString4,  _flprogMenuNameString5,  _flprogMenuNameString6,  _flprogMenuNameString7,  _flprogMenuNameString8,  _flprogMenuNameString9};
struct _menuItemStricture 
{
     int startInArrayIndex;
}
;
struct _menuMainStricture 
{
    int startIndex;
    int stopIndex;
    bool isSwitchMenuAroundRing;
    _menuItemStricture  currentItem;
}
;
_menuItemStricture _MenuItems[7];
_menuMainStricture _MainMenus[1];
bool _gtv2;
bool _gtv3;
int _gtv1;
unsigned long _gtv4;
bool _gen2I = 0;
bool _gen2O = 0;
unsigned long _gen2P = 0UL;
bool _count2I = 0;
unsigned long _count2_Value = 0UL;
bool _count2MaxLO = 0;
bool _SEEPR2OSN = 0;
bool _trgrt2 = 0;
bool _trgrt2I = 0;
unsigned long _d18x2x2Tti = 0UL;
float _d18x2x2O = 0.00;
bool _mkb1C1xP1 = 0;
bool _mkb1C1xP2 = 0;
bool _mkb1C1xP3 = 0;
bool _mkb1C1xP4 = 0;
bool _changeNumber2_Out = 0;
unsigned long _changeNumber2_OLV;
bool _swi2;
bool _FreeLog1_Q1 = 0;
bool _trgr2 = 0;
bool _trgs2 = 0;
String _MenuBlock_197478283_MNO;
String _MenuBlock_197478283_VNO;
bool _MenuBlock_197478283_OEIS = 0;
bool _MenuBlock_197478283_OMUIS = 0;
bool _MenuBlock_197478283_OMDIS = 0;
bool _MenuBlock_197478283_OVUIS = 0;
bool _MenuBlock_197478283_OVDIS = 0;
unsigned long _MenuBlock_197478283_VUDST = 0UL;
unsigned long _MenuBlock_197478283_VUDSPT = 0UL;
int _MenuBlock_197478283_VUDSM = 0;
int _MenuBlock_197478283_VUDPT = 0;
LiquidCrystal_I2C _rusLCD1(0x27 , 16, 2);
bool _sleep50300400 = 0;
bool restartSlep50300400 = 0;
unsigned long int _oldTimeFlashingSymbol;
boolean _FlashingSymbol;
int _dispoldLength125347399 = 0;
boolean _flagStop125347399 = 0;
String _eraseSymbol125347399;
String _dispoldString125347399;
byte _column125347399;
boolean _key125347399 = 0;
byte _tempColumn125347399;
byte _oldTempColumn125347399;
String _oldParametrName125347399;
String _eraseParametrName125347399;
int _dispoldLength95935827 = 0;
boolean _flagStop95935827 = 0;
String _eraseSymbol95935827;
String _dispoldString95935827;
byte _column95935827;
boolean _key95935827 = 0;
byte _tempColumn95935827;
byte _oldTempColumn95935827;
int _dispoldLength189053935 = 0;
boolean _flagStop189053935 = 0;
String _eraseSymbol189053935;
String _dispoldString189053935;
byte _column189053935;
boolean _key189053935 = 0;
byte _tempColumn189053935;
byte _oldTempColumn189053935;
bool _tempVariable_bool;
unsigned long _tempVariable_unsignedlong;
int _tempVariable_int;
float _tempVariable_float;
void setup()
{
    Wire.begin();
    delay(10);
    _rusLCD1.init();
    _rusLCD1.backlight();
    pinMode(4, OUTPUT);
    digitalWrite(4, 0);
    pinMode(6, OUTPUT);
    digitalWrite(6, 0);
    if(((readByteFromEEPROM(0, 0, 0x0))) != 124) 
    {
        (updateByteToEEPROM(0, 0, 0x0, (124)));
        (updateBooleanToEEPROM(1, 0, 0x0, (0)));
        (updateIntegerToEEPROM(2, 0, 0x0, (40)));
        (updateUnsignedLongToEEPROM(4, 0, 0x0, (100000)));
        (updateIntegerToEEPROM(8, 0, 0x0, (40)));
        (updateIntegerToEEPROM(10, 0, 0x0, (250)));
        (updateIntegerToEEPROM(12, 0, 0x0, (50)));
        (updateIntegerToEEPROM(14, 0, 0x0, (30)));
    }
    pinMode(9, INPUT_PULLUP);
    pinMode(8, INPUT_PULLUP);
    pinMode(11, INPUT_PULLUP);
    pinMode(10, INPUT_PULLUP);
    pinMode(7, OUTPUT);
    digitalWrite(7, HIGH);
    _MenuItems[0].startInArrayIndex = 0;
    _MenuItems[1].startInArrayIndex = 12;
    _MenuItems[2].startInArrayIndex = 24;
    _MenuItems[3].startInArrayIndex = 36;
    _MenuItems[4].startInArrayIndex = 48;
    _MenuItems[5].startInArrayIndex = 60;
    _MenuItems[6].startInArrayIndex = 72;
    _MainMenus[0].startIndex = 1;
    _MainMenus[0].isSwitchMenuAroundRing = 1;
    _MainMenus[0].stopIndex = 7;
    _MainMenus[0].currentItem = _MenuItems[0];
    _menuValueArray_int[0] = (readIntegerFromEEPROM(2, 0, 0x0));
    _menuValueArray_unsignedlong[0] = (readUnsignedLongFromEEPROM(4, 0, 0x0));
    _menuValueArray_int[1] = (readIntegerFromEEPROM(8, 0, 0x0));
    _menuValueArray_int[2] = (readIntegerFromEEPROM(10, 0, 0x0));
    _menuValueArray_bool[0] = (readBooleanFromEEPROM(1, 0, 0x0));
    _menuValueArray_int[3] = (readIntegerFromEEPROM(12, 0, 0x0));
    _menuValueArray_int[4] = (readIntegerFromEEPROM(14, 0, 0x0));
}
void loop()
{
    if (millis() - _oldTimeFlashingSymbol > 500) 
    {
        	_FlashingSymbol = !_FlashingSymbol;
        	_oldTimeFlashingSymbol =  millis();
    }
    //Плата:1
//Наименование:Плата дисплея
    if (!_sleep50300400)
    {
        if ((1))
        {
            _flagStop189053935 = 1;
            if (_key189053935)
            {
                String _tempPostfix = (0 ?  : "");
                	if(_dispoldString189053935 != ((String(_gtv4, DEC))) + _tempPostfix || restartSlep50300400)
                	
                {
                    		int _dispTempLength = rusStrlen((((String(_gtv4, DEC))) + _tempPostfix).c_str());
                    _column189053935 =  + 1 - 1;
                    	_tempColumn189053935 =  _column189053935;
                    	_rusLCD1.setCursor (_oldTempColumn189053935, (2 - 1));
                    	_oldTempColumn189053935 = _tempColumn189053935;
                    if (_dispoldLength189053935 > _dispTempLength)
                    {
                        _rusLCD1.print(_eraseSymbol189053935);
                    }
                    _eraseSymbol189053935 = "";
                    for (byte i = 0; i < _dispTempLength; i ++)
                    {
                        _eraseSymbol189053935 = _eraseSymbol189053935 + " ";
                    }
                    _eraseSymbol189053935 = _eraseSymbol189053935 + (0 == 1 ? " " : "");
                    	_dispoldLength189053935 = _dispTempLength;
                    	_dispoldString189053935 =((String(_gtv4, DEC))) + _tempPostfix;
                    	_rusLCD1.setCursor (_tempColumn189053935, (2 - 1));
                    	_rusLCD1.print(_dispoldString189053935);
                }
            }
            _key189053935 = 1;
        }
        else if (_flagStop189053935)
        {
            	_flagStop189053935 = 0;
            	_rusLCD1.setCursor ((_column189053935), (2 - 1));
            _rusLCD1.print(_eraseSymbol189053935);
            _dispoldLength189053935 = 0;
            _dispoldString189053935 = "";
            _eraseSymbol189053935 = "";
            _key189053935 = 0;
        }
    }
    if (!_sleep50300400)
    {
        if ((1))
        {
            _flagStop95935827 = 1;
            if (_key95935827)
            {
                String _tempPostfix = (1 ? (String("С")) : "");
                	if(_dispoldString95935827 != ((String(_gtv1, DEC))) + _tempPostfix || restartSlep50300400)
                	
                {
                    		int _dispTempLength = rusStrlen((((String(_gtv1, DEC))) + _tempPostfix).c_str());
                    _column95935827 =(16 - _dispTempLength)/ 2;
                    	_tempColumn95935827 =  _column95935827;
                    	_rusLCD1.setCursor (_oldTempColumn95935827, (1 - 1));
                    	_oldTempColumn95935827 = _tempColumn95935827;
                    if (_dispoldLength95935827 > _dispTempLength)
                    {
                        _rusLCD1.print(_eraseSymbol95935827);
                    }
                    _eraseSymbol95935827 = "";
                    for (byte i = 0; i < _dispTempLength; i ++)
                    {
                        _eraseSymbol95935827 = _eraseSymbol95935827 + " ";
                    }
                    _eraseSymbol95935827 = _eraseSymbol95935827 + (0 == 1 ? " " : "");
                    	_dispoldLength95935827 = _dispTempLength;
                    	_dispoldString95935827 =((String(_gtv1, DEC))) + _tempPostfix;
                    	_rusLCD1.setCursor (_tempColumn95935827, (1 - 1));
                    	_rusLCD1.print(_dispoldString95935827);
                }
            }
            _key95935827 = 1;
        }
        else if (_flagStop95935827)
        {
            	_flagStop95935827 = 0;
            	_rusLCD1.setCursor ((_column95935827), (1 - 1));
            _rusLCD1.print(_eraseSymbol95935827);
            _dispoldLength95935827 = 0;
            _dispoldString95935827 = "";
            _eraseSymbol95935827 = "";
            _key95935827 = 0;
        }
    }
    digitalWrite(7, 0);
    _mkb1C1xP1 = ! (digitalRead(9));
    _mkb1C1xP2 = ! (digitalRead(8));
    _mkb1C1xP3 = ! (digitalRead(11));
    _mkb1C1xP4 = ! (digitalRead(10));
    digitalWrite(7, 1);
    if (1) 
    {
        _tempVariable_bool  =  1;
        if (! _MenuBlock_197478283_OEIS) 
        {
            _MenuBlock_197478283_OEIS = 1;
        }
        _tempVariable_int = pgm_read_byte(&_menuParametrsArray[((_MainMenus[0].currentItem).startInArrayIndex)+10]);
        _MenuBlock_197478283_MNO = _readStringFromProgmem ((char*)pgm_read_word(&(_flprogMenuStringsArray[_tempVariable_int - 1])));
        _MenuBlock_197478283_VNO = _menuOutputValueString (0);
    }
     else 
    {
        _tempVariable_bool  =  0;
        if (_MenuBlock_197478283_OEIS)
        {
            _MenuBlock_197478283_OEIS = 0;
        }
        _MenuBlock_197478283_MNO = "";
        _MenuBlock_197478283_VNO = "";
    }
    if(_mkb1C1xP3) 
    {
         if (! _MenuBlock_197478283_OMUIS) 
        {
            _MenuBlock_197478283_OMUIS = 1;
            if(_tempVariable_bool)
            {
                  _menuUpEvents(0);
            }
        }
    }
     else 
    {
        _MenuBlock_197478283_OMUIS = 0;
    }
    if(_mkb1C1xP4) 
    {
         if (! _MenuBlock_197478283_OMDIS) 
        {
            _MenuBlock_197478283_OMDIS = 1;
            if(_tempVariable_bool)
            {
                   _menuDownEvents(0);
            }
        }
    }
     else 
    {
        _MenuBlock_197478283_OMDIS = 0;
    }
    if(_mkb1C1xP1) 
    {
         if (! _MenuBlock_197478283_OVUIS) 
        {
            _MenuBlock_197478283_OVUIS = 1;
            if(_tempVariable_bool)
            {
                _valueUpEvents(0);
                _menuUpdateToEEpromItems();
                _MenuBlock_197478283_VUDST = millis();
            }
        }
        if (_tempVariable_bool)
        {
            if (_MenuBlock_197478283_VUDSM == 0) 
            {
                 if (_isTimer(_MenuBlock_197478283_VUDST , 500)) 
                {
                    _MenuBlock_197478283_VUDSM = 1;
                    _MenuBlock_197478283_VUDSPT = millis();
                    _MenuBlock_197478283_VUDPT  = 100;
                }
            }
              else 
            {
                 if (_MenuBlock_197478283_VUDSM == 1) 
                {
                     if (_isTimer(_MenuBlock_197478283_VUDST , 1000)) 
                    {
                        _MenuBlock_197478283_VUDSM = 2;
                        _MenuBlock_197478283_VUDPT  = 1;
                    }
                }
                 if (_isTimer(_MenuBlock_197478283_VUDSPT , _MenuBlock_197478283_VUDPT)) 
                {
                    _valueUpEvents(0);
                    _menuUpdateToEEpromItems();
                    _MenuBlock_197478283_VUDSPT = millis();
                }
            }
        }
    }
     else 
    {
        _MenuBlock_197478283_OVUIS = 0;
        if(! (_mkb1C1xP2))
        {
            _MenuBlock_197478283_VUDSM = 0;
        }
    }
    if(_mkb1C1xP2) 
    {
         if (! _MenuBlock_197478283_OVDIS) 
        {
            _MenuBlock_197478283_OVDIS = 1;
            if(_tempVariable_bool)
            {
                _valueDownEvents(0);
                _menuUpdateToEEpromItems();
                _MenuBlock_197478283_VUDST = millis();
            }
        }
         if (_tempVariable_bool)
        {
            if (_MenuBlock_197478283_VUDSM == 0) 
            {
                 if (_isTimer(_MenuBlock_197478283_VUDST , 500)) 
                {
                    _MenuBlock_197478283_VUDSM = 1;
                    _MenuBlock_197478283_VUDSPT = millis();
                    _MenuBlock_197478283_VUDPT  = 100;
                }
            }
              else 
            {
                 if (_MenuBlock_197478283_VUDSM == 1) 
                {
                     if (_isTimer(_MenuBlock_197478283_VUDST , 1000)) 
                    {
                        _MenuBlock_197478283_VUDSM = 2;
                        _MenuBlock_197478283_VUDPT  = 1;
                    }
                }
                 if (_isTimer(_MenuBlock_197478283_VUDSPT , _MenuBlock_197478283_VUDPT)) 
                {
                    _valueDownEvents(0);
                    _menuUpdateToEEpromItems();
                    _MenuBlock_197478283_VUDSPT = millis();
                }
            }
        }
    }
     else 
    {
        _MenuBlock_197478283_OVDIS = 0;
        if(! (_mkb1C1xP1))
        {
            _MenuBlock_197478283_VUDSM = 0;
        }
    }
    if(0)
    {
        if (_tempVariable_bool)
        {
            (_MainMenus[0]).currentItem = _MenuItems[2];
        }
    }
    if (!_sleep50300400)
    {
        if ((1))
        {
            _flagStop125347399 = 1;
            if (_key125347399)
            {
                String _tempPostfix = (0 ?  : "");
                	if(_dispoldString125347399 != (_MenuBlock_197478283_VNO) + _tempPostfix || restartSlep50300400)
                	
                {
                    		int _dispTempLength = rusStrlen(((_MenuBlock_197478283_VNO) + _tempPostfix).c_str());
                    _column125347399 = 6 + 10 - 1;
                    	_tempColumn125347399 =  _column125347399;
                    	_rusLCD1.setCursor (_oldTempColumn125347399, (1 - 1));
                    	_oldTempColumn125347399 = _tempColumn125347399;
                    if (_dispoldLength125347399 > _dispTempLength)
                    {
                        _rusLCD1.print(_eraseSymbol125347399);
                    }
                    _eraseSymbol125347399 = "";
                    for (byte i = 0; i < _dispTempLength; i ++)
                    {
                        _eraseSymbol125347399 = _eraseSymbol125347399 + " ";
                    }
                    _eraseSymbol125347399 = _eraseSymbol125347399 + (0 == 1 ? " " : "");
                    	_dispoldLength125347399 = _dispTempLength;
                    	_dispoldString125347399 =(_MenuBlock_197478283_VNO) + _tempPostfix;
                    	_rusLCD1.setCursor (_tempColumn125347399, (1 - 1));
                    	_rusLCD1.print(_dispoldString125347399);
                }
                	if (_oldParametrName125347399 != (_MenuBlock_197478283_MNO) || restartSlep50300400)
                	
                {
                    		int i = 0;
                    		_eraseParametrName125347399 = "";
                    		while (i < 6)
                    		
                    {
                        			_eraseParametrName125347399 = _eraseParametrName125347399 + " " ;
                        			i++;
                        		
                    }
                    		_oldParametrName125347399 = (_MenuBlock_197478283_MNO);
                    		_rusLCD1.setCursor((0 == 1 ? (10) : 10 - 1), (1 - 1));
                    		_rusLCD1.print(_eraseParametrName125347399);
                    		_rusLCD1.setCursor((0 == 1 ? (10) : 10  - 1), (1 - 1));
                    		_rusLCD1.print((_MenuBlock_197478283_MNO));
                    	
                }
            }
            _key125347399 = 1;
        }
        else if (_flagStop125347399)
        {
            	_flagStop125347399 = 0;
            	_rusLCD1.setCursor ((_column125347399), (1 - 1));
            _rusLCD1.print(_eraseSymbol125347399);
            _dispoldLength125347399 = 0;
            		_rusLCD1.setCursor((0 == 1 ? (10) : 10 - 1), (1 - 1));
            		_rusLCD1.print(_eraseParametrName125347399);
            _dispoldString125347399 ="";
            _eraseSymbol125347399 = "";
            _oldParametrName125347399 ="";
            _eraseParametrName125347399 = "";
            _key125347399 = 0;
        }
    }
    _gtv2 = ((_mkb1C1xP1) && (_mkb1C1xP2));
    //Плата:2
//Наименование:Температурный интерфейс
    if(_isTimer(_d18x2x2Tti, 1000)) 
    {
        _d18x2x2Tti = millis();
        _tempVariable_float =  _readDS18_ow12(_d18x2x2Addr, 0);
        if (_tempVariable_float < 500) 
        {
            _d18x2x2O = _tempVariable_float;
        }
    }
    _gtv1 = (int((_d18x2x2O)));
    if((35) >= ((int((_d18x2x2O))))) _trgs2 = 1;
    if(((_menuValueArray_int[3])) <= ((int((_d18x2x2O))))) _trgs2 = 0;
    _gtv3 = _trgs2;
    if(((_menuValueArray_int[4])) >= ((int((_d18x2x2O))))) _trgr2 = 0;
    if(((_menuValueArray_int[0])) <= ((int((_d18x2x2O))))) _trgr2 = 1;
    digitalWrite(6, _trgr2);
    //Плата:3
//Наименование:Генератор импульса
    _FreeLog1_IArr[0] = _gtv3;
    _FreeLog1_IArr[1] = (_menuValueArray_bool[0]);
    _FreeLog1_Q1 = _checkFreeLogicBlockOutput(_FreeLog1_IArr, 2, _FreeLog1_Q1_StArr, 2);
    if (_FreeLog1_Q1) 
    {
        if (! _gen2I) 
        {
            _gen2I = 1;
            _gen2O = 1;
            _gen2P =  millis();
        }
    }
     else 
    {
        _gen2I = 0 ;
        _gen2O= 0;
    }
     if (_gen2I) 
    {
         if (_gen2O) 
        {
             if (_isTimer(_gen2P , (_menuValueArray_int[1]))) 
            {
                 _gen2P = millis();
                _gen2O = 0;
            }
        }
         else  
        {
             if (_isTimer(_gen2P , (_menuValueArray_int[2]))) 
            {
                  _gen2P = millis();
                _gen2O = 1;
            }
        }
    }
    if (1) 
    {
         if (_trgrt2I) 
        {
             _trgrt2 = 0;
        }
         else 
        {
            _trgrt2 = 1;
            _trgrt2I = 1;
        }
    }
     else 
    {
        _trgrt2 = 0;
        _trgrt2I = 0;
    }
    ;
    if (_trgrt2)
    {
        _count2_Value = (readUnsignedLongFromEEPROM(16, 0, 0x0));
    }
     else 
    {
        if (_gtv2)
        {
            _count2_Value = 0;
        }
         else 
        {
            if (_gen2O)
            {
                if (! _count2I) 
                {
                    _count2I = 1;
                    if(_count2_Value < ((_menuValueArray_unsignedlong[0]))) 
                    {
                        _count2_Value = _count2_Value + 1;
                    }
                }
            }
             else 
            {
                _count2I = 0;
            }
        }
    }
    _count2MaxLO = _count2_Value >= ((_menuValueArray_unsignedlong[0]));
    _gtv4 = _count2_Value;
    if (_changeNumber2_Out) 
    {
        _changeNumber2_Out = 0;
    }
     else 
    {
        _tempVariable_unsignedlong = _count2_Value;
        if (_tempVariable_unsignedlong != _changeNumber2_OLV) 
        {
            _changeNumber2_OLV = _tempVariable_unsignedlong;
            _changeNumber2_Out = 1;
        }
    }
    if(_changeNumber2_Out)
    {
         if(!_SEEPR2OSN)
        {
            (updateUnsignedLongToEEPROM(16, 0, 0x0, (_count2_Value)));
            _SEEPR2OSN=1;
        }
    }
    else
    {
         if(_SEEPR2OSN)
        {
            _SEEPR2OSN=0;
        }
    }
    if(_count2MaxLO)
    {
        _swi2=0;
    }
    else
    {
        _swi2=(_menuValueArray_bool[0]);
    }
    _menuValueArray_bool[0] = _swi2;
    (updateBooleanToEEPROM(1, 0, 0x0, ((_menuValueArray_bool[0]))));
    digitalWrite(4, _gen2O);
}
bool _isTimer(unsigned long startTime, unsigned long period)
{
    unsigned long currentTime;
    currentTime = millis();
    if (currentTime>= startTime) 
    {
        return (currentTime>=(startTime + period));
    }
     else 
    {
        return (currentTime >=(4294967295-startTime+period));
    }
}
String _readStringFromProgmem (char *string)
{
    String result = String("");
    while (pgm_read_byte(string)!='\0')
    {
        result=result+ char(pgm_read_byte(string));
        	string++;
        	
    }
    return result;
}
void _menuUpEvents (int menuIndex)
{
    int tempIndex = pgm_read_byte(&_menuParametrsArray[((_MainMenus[menuIndex]).currentItem).startInArrayIndex]);
    int parIndex = pgm_read_byte(&_menuParametrsArray[ (((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+5]);
    int parentStartIndex;
    int parentStopIndex;
    if (parIndex == 0) 
    {
        parentStartIndex = (_MainMenus[menuIndex]).startIndex;
        parentStopIndex =(_MainMenus[menuIndex]).stopIndex;
    }
    else 
    {
        parentStartIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex - 1]).startInArrayIndex)+3]);
        parentStopIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+4]);
    }
    if (tempIndex == parentStartIndex) 
    {
        if((_MainMenus[menuIndex]).isSwitchMenuAroundRing) 
        {
            (_MainMenus[menuIndex]).currentItem = _MenuItems[parentStopIndex -1];
            return;
        }
         else
        {
            return;
        }
    }
    (_MainMenus[menuIndex]).currentItem = _MenuItems[tempIndex - 2];
    return;
}
void _menuDownEvents (int menuIndex)
{
    int tempIndex = pgm_read_byte(&_menuParametrsArray[((_MainMenus[menuIndex]).currentItem).startInArrayIndex]);
    int parIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+5]);
    int parentStartIndex;
    int parentStopIndex;
    if (parIndex == 0) 
    {
        parentStartIndex = (_MainMenus[menuIndex]).startIndex;
        parentStopIndex =(_MainMenus[menuIndex]).stopIndex;
    }
    else 
    {
        parentStartIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+3]);
        parentStopIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+4]);
    }
    if (tempIndex == parentStopIndex) 
    {
        if((_MainMenus[menuIndex]).isSwitchMenuAroundRing) 
        {
            (_MainMenus[menuIndex]).currentItem = _MenuItems[parentStartIndex -1];
            return;
        }
         else
        {
            return;
        }
    }
    (_MainMenus[menuIndex]).currentItem = _MenuItems[tempIndex];
    return;
}
void _valueUpEvents (int menuIndex)
{
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int itemType = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int indexMax = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+6]);
    int indexStep = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+8]);
    if(itemType ==3) 
    {
        _menuValueArray_bool[valIndex - 1 ] = 1;
        return;
    }
    if (itemType == 1) 
    {
        if (! indexMax == 0) 
        {
             if (! (word(pgm_read_dword(&_menuConstantValuesArray_unsignedlong[indexMax -1])) > word(_menuValueArray_unsignedlong[valIndex -1]))) 
            {
                return;
            }
        }
        _menuValueArray_unsignedlong[valIndex -1] = _menuValueArray_unsignedlong[valIndex -1] + (pgm_read_dword(&_menuConstantValuesArray_unsignedlong[indexStep -1]));
    }
    if (itemType == 4) 
    {
        if (! indexMax == 0) 
        {
             if (! (int(pgm_read_word(&_menuConstantValuesArray_int[indexMax -1])) > int(_menuValueArray_int[valIndex -1]))) 
            {
                return;
            }
        }
        _menuValueArray_int[valIndex -1] = _menuValueArray_int[valIndex -1] + (pgm_read_word(&_menuConstantValuesArray_int[indexStep -1]));
    }
}
void _valueDownEvents (int menuIndex)
{
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int itemType = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int indexMin = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+7]);
    int indexStep = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+8]);
    if(itemType ==3) 
    {
        _menuValueArray_bool[valIndex -1] = 0;
        return;
    }
    if (itemType == 1) 
    {
        if (! indexMin == 0) 
        {
             if (! ((word(pgm_read_dword(&_menuConstantValuesArray_unsignedlong[indexMin - 1]))) < word(_menuValueArray_unsignedlong[valIndex - 1]))) 
            {
                return;
            }
        }
        _menuValueArray_unsignedlong[valIndex - 1] = _menuValueArray_unsignedlong[valIndex - 1] - (pgm_read_dword(&_menuConstantValuesArray_unsignedlong[indexStep - 1]));
    }
    if (itemType == 4) 
    {
        if (! indexMin == 0) 
        {
             if (! ((int(pgm_read_word(&_menuConstantValuesArray_int[indexMin - 1]))) < int(_menuValueArray_int[valIndex - 1]))) 
            {
                return;
            }
        }
        _menuValueArray_int[valIndex - 1] = _menuValueArray_int[valIndex - 1] - (pgm_read_word(&_menuConstantValuesArray_int[indexStep - 1]));
    }
}
String _menuOutputValueString (int menuIndex)
{
    int itemType = pgm_read_byte(&_menuParametrsArray[ (((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int indexMin = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+7]);
    int indexMax = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+6]);
    if(valIndex == 0)
    {
         return "";
    }
    int convFormat = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+9]);
    if(itemType == 1) 
    {
         return _convertNamber(itemType, convFormat, valIndex, indexMax, indexMin);
    }
    if(itemType == 3) 
    {
         return _convertBoolean(itemType, convFormat, valIndex, indexMax, indexMin);
    }
    if(itemType == 4) 
    {
         return _convertNamber(itemType, convFormat, valIndex, indexMax, indexMin);
    }
    return "";
}
void _menuUpdateToEEpromItems()
{
    (updateIntegerToEEPROM(2, 0, 0x0, ((_menuValueArray_int[0]))));
    (updateUnsignedLongToEEPROM(4, 0, 0x0, ((_menuValueArray_unsignedlong[0]))));
    (updateIntegerToEEPROM(8, 0, 0x0, ((_menuValueArray_int[1]))));
    (updateIntegerToEEPROM(10, 0, 0x0, ((_menuValueArray_int[2]))));
    (updateBooleanToEEPROM(1, 0, 0x0, ((_menuValueArray_bool[0]))));
    (updateIntegerToEEPROM(12, 0, 0x0, ((_menuValueArray_int[3]))));
    (updateIntegerToEEPROM(14, 0, 0x0, ((_menuValueArray_int[4]))));
}
String _convertNamber(int itemType, int convFormat, int valIndex, int indexMax, int indexMin)
{
    if (itemType== 1) 
    {
        if (convFormat == 4) 
        {
             return String((_menuValueArray_unsignedlong[valIndex - 1 ]),DEC);
        }
        if (convFormat == 5) 
        {
             return String((_menuValueArray_unsignedlong[valIndex - 1]),HEX);
        }
        if (convFormat == 6) 
        {
             return String((_menuValueArray_unsignedlong[valIndex -1]),BIN);
        }
    }
    if (itemType== 4) 
    {
        if (convFormat == 4) 
        {
             return String((_menuValueArray_int[valIndex - 1 ]),DEC);
        }
        if (convFormat == 5) 
        {
             return String((_menuValueArray_int[valIndex - 1]),HEX);
        }
        if (convFormat == 6) 
        {
             return String((_menuValueArray_int[valIndex -1]),BIN);
        }
    }
}
String _convertBoolean(int itemType, int convFormat, int valIndex, int indexMax, int indexMin)
{
    if (convFormat == 1) 
    {
         if(_menuValueArray_bool[valIndex -1]) 
        {
            return "1";
        }
         else
        {
             return "0";
        }
    }
    if (convFormat == 2) 
    {
         if(_menuValueArray_bool[valIndex -1]) 
        {
            return "True";
        }
         else
        {
             return "False";
        }
    }
    if (convFormat == 3) 
    {
         if(_menuValueArray_bool[valIndex -1 ]) 
        {
            return "Да";
        }
         else
        {
             return "Нет";
        }
    }
    if(_menuValueArray_bool[valIndex -1]) 
    {
        return _readStringFromProgmem ((char*)pgm_read_word(&(_flprogMenuStringsArray[indexMax - 1])));
    }
     else 
    {
         return _readStringFromProgmem ((char*)pgm_read_word(&(_flprogMenuStringsArray[indexMin - 1])));
    }
}
float _convertDS18x2xData(byte type_s, byte data[12])
{
    int16_t raw = (data[1] << 8) | data[0];
    if (type_s)
    {
        raw = raw << 3;
        if (data[7] == 0x10) 
        {
             raw = (raw & 0xFFF0) + 12 - data[6];
        }
    }
    else
    {
        byte cfg = (data[4] & 0x60);
        if (cfg == 0x00)raw = raw & ~7;
        else if(cfg == 0x20)raw = raw & ~3;
        else if(cfg == 0x40) raw = raw & ~1;
    }
    return  (float)raw / 16.0;
}
float _readDS18_ow12(byte addr[8], byte type_s)
{
    byte data[12];
    byte i;
    _ow12.reset();
    _ow12.select(addr);
    _ow12.write(0xBE);
    for (i = 0; i < 9; i++) 
    {
         data[i] = _ow12.read();
    }
    _ow12.reset();
    _ow12.select(addr);
    _ow12.write(0x44);
    if (_ow12.crc8(data, 8) != data[8])
    {
        return 501;
    }
    return _convertDS18x2xData(type_s, data);
}
bool _checkFreeLogicBlockOutput(bool inArray[], int inArraySize, bool stArray[], int stArraySize)
{
    int inIndex = 0;
    bool result = 1;
    for (int i = 0; i < stArraySize; i = i + 1)
    {
        if (!(inArray[inIndex] == stArray[i])) 
        {
             result = 0;
        }
        inIndex ++;
        if (inIndex == inArraySize)
        {
            if (result) 
            {
                 return 1;
            }
             else 
            {
                result = 1;
            }
            inIndex = 0;
        }
    }
    return 0;
}
byte readByteFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    return EEPROM.read(addres);
}
void updateByteToEEPROM(int addres, byte bitAddres, byte chipAddres, byte value)
{
    return EEPROM.update(addres, value);
}
bool readBooleanFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    byte temp = readByteFromEEPROM(addres,  bitAddres,  chipAddres);
    return  bitRead(temp, bitAddres);
}
void updateBooleanToEEPROM(int addres, byte bitAddres, byte chipAddres, bool value)
{
    byte temp = readByteFromEEPROM(addres,  bitAddres,  chipAddres);
    bitWrite(temp, bitAddres, value);
    updateByteToEEPROM(addres,  bitAddres,  chipAddres, temp);
}
int readIntegerFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    byte hight = readByteFromEEPROM(addres,  bitAddres,  chipAddres);
    byte low = readByteFromEEPROM((addres+1),  bitAddres,  chipAddres);
    return  word(hight, low);
}
void updateIntegerToEEPROM(int addres, byte bitAddres, byte chipAddres, int value)
{
    updateByteToEEPROM(addres,  bitAddres,  chipAddres, highByte(value));
    updateByteToEEPROM((addres+1),  bitAddres,  chipAddres, lowByte(value));
}
unsigned long readUnsignedLongFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    byte x[4];
    for(byte i = 0; i < 4; i++) 
    {
         x[i] = readByteFromEEPROM((addres+i),  bitAddres,  chipAddres);
    }
    unsigned long *y = (unsigned long *)&x;
    return y[0];
}
void updateUnsignedLongToEEPROM(int addres, byte bitAddres, byte chipAddres, unsigned long value)
{
    byte *x = (byte *)&value;
    for(byte i = 0; i < 4; i++) 
    {
        updateByteToEEPROM((addres+i),  bitAddres,  chipAddres, x[i]);
    }
}
byte rusStrlen(const char * data)
{
    byte i = 0;
    byte count = 0;
    while (data[i])
    {
        if ((data[i] & 0xc0) != 0x80) count++;
        i++;
    }
    return count;
}
